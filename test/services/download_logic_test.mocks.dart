// Mocks generated by Mockito 5.4.0 from annotations
// in youtube_podcast/test/services/download_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:youtube_podcast/src/services/download_logic/download_logic_io.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DownloadLogicIO].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadLogicIO extends _i1.Mock implements _i2.DownloadLogicIO {
  @override
  _i3.Future<_i2.DownloadStatus> downloadStatus(String? videoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadStatus,
          [videoId],
        ),
        returnValue:
            _i3.Future<_i2.DownloadStatus>.value(_i2.DownloadStatus.notStarted),
        returnValueForMissingStub:
            _i3.Future<_i2.DownloadStatus>.value(_i2.DownloadStatus.notStarted),
      ) as _i3.Future<_i2.DownloadStatus>);
  @override
  _i3.Future<bool> hasStoragePermission() => (super.noSuchMethod(
        Invocation.method(
          #hasStoragePermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> startDownload(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #startDownload,
          [videoId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> cleanDownload(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #cleanDownload,
          [videoId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<_i2.TryOpenResult> tryOpenCompletedFile(String? videoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #tryOpenCompletedFile,
          [videoId],
        ),
        returnValue:
            _i3.Future<_i2.TryOpenResult>.value(_i2.TryOpenResult.done),
        returnValueForMissingStub:
            _i3.Future<_i2.TryOpenResult>.value(_i2.TryOpenResult.done),
      ) as _i3.Future<_i2.TryOpenResult>);
  @override
  void onFileOpened(String? videoId) => super.noSuchMethod(
        Invocation.method(
          #onFileOpened,
          [videoId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showSuccessMessage(
    String? msg,
    String? videoId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #showSuccessMessage,
          [
            msg,
            videoId,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showErrorMessage(String? msg) => super.noSuchMethod(
        Invocation.method(
          #showErrorMessage,
          [msg],
        ),
        returnValueForMissingStub: null,
      );
}
